@if ($_SQL->namespace)namespace {{$_SQL->namespace}}; 
@endif

use archive\Archive;
use archive\Condition;
use archive\Statement;

class {{ $_SQL->name }} implements Archive {
    protected static $_fields={{ $this->getFieldsStr() }};
@foreach($_SQL->fields as $name => $field)
<?php  $comment =isset($this->sets[$name]['comment'])? $this->sets[$name]['comment'] :$field; ?>
<?php  $type = preg_match('/int/i',$field)?'int':'string'; ?>
    /**
     * {{$comment}} 
     * @var {{$type}} 
     */
    protected ${{$name}};
@endforeach

@foreach($_SQL->fields as $name => $field)
<?php  $type = preg_match('/int/i',$field)?'int':'string'; ?>


    /**
     * @return {{$_SQL->name}}   
     */
    public function set{{ucfirst($name)}}({{$type}} ${{$name}}) {
        $this->{{$name}}=${{$name}};
        return $this;
    }

    /**
     * @return {{$type}}   
     */
    public function get{{ucfirst($name)}}() : {{$type}} {
        return $this->{{$name}};
    }
@endforeach
    function getFeilds():array
    {
        return self::$_fields;
    }
    function getAvailableFields():array
    {
        $available=[];
        foreach (self::$_fields as $name){
            if (isset($this->{$name})){
                $available[]=$name;
            }
        }
        return $available;
    }
    function tableCreator():string{}
    function sqlCreate():Statement{}
    function sqlRetrieve(Condition $condition):Statement{}
    function sqlUpdate():Statement{}
    function sqlDelete():Statement{}
}